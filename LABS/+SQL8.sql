--1.	Разработать следующие DML триггеры и продемонстрировать 
--работоспособность триггеров: 
--1.1.	При добавлении нового офиса добавлять строку с данными офиса в таблицу
--Audit.
CREATE TABLE AUDIT(
	OFFICE_AT INT,
	CITY_AT VARCHAR(20),
	REGION_AT VARCHAR(20),
	MGR_AT INT,
	TARGET_AT DECIMAL(9, 2),
	SALES DECIMAL(9, 2));

CREATE TRIGGER trigger_ADD_OFFICE
    ON OFFICES AFTER INSERT
    AS
BEGIN
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM INSERTED)
	SELECT @CITY_AT = (SELECT CITY FROM INSERTED)
    SELECT @REGION_AT = (SELECT REGION FROM INSERTED)
    SELECT @MGR_AT = (SELECT MGR FROM INSERTED)
	SELECT @TARGET_AT = (SELECT TARGET FROM INSERTED)
    SELECT @SALES = (SELECT SALES FROM INSERTED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
   
END

INSERT INTO OFFICES VALUES(30,'LOS ANGELES','EAST',NULL,500000.00,986042.00);
INSERT INTO OFFICES VALUES(44,'NEW JERSAY','Eastern',NULL,875000.00,992637.00);
INSERT INTO OFFICES VALUES(55,'BOOFALO','SOUTH',NULL,900000.00,935042.00);
INSERT INTO OFFICES VALUES(57,'DETROID','WEST',NULL,450000.00,967911.00);
INSERT INTO OFFICES VALUES(88,'MICHIGAN','EAST',NULL,225000.00,935915.00);
DROP TRIGGER trigger_ADD_OFFICE
SELECT * FROM AUDIT

select * from offices
/*GO
CREATE TABLE AUDITTABLE(
OFF_ID INT, 
OFFICE VARCHAR(15),
REGION VARCHAR(15), 
CITY VARCHAR(15));

INSERT INTO AUDITTABLE VALUES(101,'RED','WILD_WEST','LOS ANGELES');
INSERT INTO AUDITTABLE VALUES(104,'GREEN','SOUTH_COAST','NEW JERSAY');
INSERT INTO AUDITTABLE VALUES(108,'BLACK','EAST_COAST','HOLLIWOOD');
GO
CREATE TRIGGER trigger_NEW_OFFICE
    ON AUDITTABLE AFTER UPDATE
    AS IF UPDATE(OFFICE)
BEGIN
    DECLARE @OFF_ID INT
	DECLARE @OFFICE VARCHAR(15)
    DECLARE @REGION VARCHAR(15)
	DECLARE @CITY VARCHAR(15)

    SELECT @OFF_ID = (SELECT OFFICE FROM deleted)
	SELECT @OFFICE = (SELECT OFFICE FROM inserted)
    SELECT @REGION = (SELECT REGION FROM inserted)
    SELECT @CITY = (SELECT OFFICE FROM deleted)

    INSERT INTO AUDITTABLE VALUES
        (@OFF_ID, @OFFICE, @REGION, @CITY)
END

UPDATE AUDITTABLE
    SET OFF_ID = 102
    WHERE REGION = 'WILD_WEST';
	DROP TRIGGER trigger_NEW_OFFICE
select * from AUDITTABLE*/

--1.2.	При обновлении данных офиса добавлять строку с предыдущими данными офиса в таблицу Audit.
CREATE TRIGGER trigger_NEW_OFFICE
    ON OFFICES AFTER UPDATE
    AS
BEGIN
    DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM INSERTED)
	SELECT @CITY_AT = (SELECT CITY FROM INSERTED)
    SELECT @REGION_AT = (SELECT REGION FROM INSERTED)
    SELECT @MGR_AT = (SELECT MGR FROM INSERTED)
	SELECT @TARGET_AT = (SELECT TARGET FROM INSERTED)
    SELECT @SALES = (SELECT SALES FROM INSERTED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
END

UPDATE OFFICES
    SET CITY = 'TEXAS'
    WHERE OFFICE = 11;
SELECT * FROM AUDIT
SELECT * FROM OFFICES

DROP TRIGGER trigger_NEW_OFFICE

--1.3.	При удалении данных о офиса добавлять строку с данными офиса в таблицу Audit. 
CREATE TRIGGER trigger_DELETE_OFFICE
    ON OFFICES AFTER DELETE
    AS
BEGIN
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM DELETED)
	SELECT @CITY_AT = (SELECT CITY FROM DELETED)
    SELECT @REGION_AT = (SELECT REGION FROM DELETED)
    SELECT @MGR_AT = (SELECT MGR FROM DELETED)
	SELECT @TARGET_AT = (SELECT TARGET FROM DELETED)
    SELECT @SALES = (SELECT SALES FROM DELETED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
   
END

DELETE OFFICES WHERE CITY = 'DETROID'
DELETE OFFICES WHERE CITY = 'BOOFALO'

SELECT * FROM AUDIT
SELECT * FROM OFFICES

DROP TRIGGER trigger_DELETE_OFFICE

--2.	Разработать скрипт, который демонстрирует, что проверка ограничения целостности выполняется до срабатывания AFTER-триггера.
/*CREATE TRIGGER after_insert
	ON OFFICES  AFTER INSERT 
AS
BEGIN
IF (SELECT OFFICE FROM INSERTED) > 55
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)
DELETE FROM AUDIT  WHERE OFFICE_AT = 55;
INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
   
END
SELECT * FROM AUDIT
SELECT * FROM OFFICES
DROP TRIGGER after_insert*/

--3.	 Создать 3 триггера, срабатывающих на событие удаления в таблице и упорядочить их.
CREATE TABLE AUDIT2(
	OFFICE_AT INT NOT NULL,
	CITY_AT VARCHAR(20) NOT NULL,
	REGION_AT VARCHAR(20) NOT NULL,
	MGR_AT INT,
	TARGET_AT DECIMAL(9, 2) NOT NULL,
	SALES DECIMAL(9, 2) NOT NULL,
	OPERATION TEXT NOT NULL);
-------------------------------------ONE----------------------------------------------------
CREATE TRIGGER TRIGGER_DELETE_ONE 
	ON OFFICES AFTER DELETE
AS
BEGIN 
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)
--IF @@ROWCOUNT = 1 --эта функция возвращает количество строк, обработанных последней командой.
	SELECT @OFFICE_AT = (SELECT OFFICE FROM DELETED)
	SELECT @CITY_AT = (SELECT CITY FROM DELETED)
    SELECT @REGION_AT = (SELECT REGION FROM DELETED)
    SELECT @MGR_AT = (SELECT MGR FROM DELETED)
	SELECT @TARGET_AT = (SELECT TARGET FROM DELETED)
    SELECT @SALES = (SELECT SALES FROM DELETED)

INSERT INTO AUDIT2 VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES, 'DELETE')
RETURN
END;
-------------------------------------TWO----------------------------------------------------
CREATE TRIGGER TRIGGER_DELETE_TWO 
	ON OFFICES AFTER DELETE
AS
BEGIN 
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)
--IF @@ROWCOUNT = 1 --эта функция возвращает количество строк, обработанных последней командой.
	SELECT @OFFICE_AT = (SELECT OFFICE FROM DELETED)
	SELECT @CITY_AT = (SELECT CITY FROM DELETED)
    SELECT @REGION_AT = (SELECT REGION FROM DELETED)
    SELECT @MGR_AT = (SELECT MGR FROM DELETED)
	SELECT @TARGET_AT = (SELECT TARGET FROM DELETED)
    SELECT @SALES = (SELECT SALES FROM DELETED)

INSERT INTO AUDIT2 VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES, 'DELETE')
RETURN
END;
-------------------------------------THREE----------------------------------------------------
CREATE TRIGGER TRIGGER_DELETE_THREE 
	ON OFFICES AFTER DELETE
AS	
BEGIN 
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)
--IF @@ROWCOUNT = 1 --эта функция возвращает количество строк, обработанных последней командой.
	SELECT @OFFICE_AT = (SELECT OFFICE FROM DELETED)
	SELECT @CITY_AT = (SELECT CITY FROM DELETED)
    SELECT @REGION_AT = (SELECT REGION FROM DELETED)
    SELECT @MGR_AT = (SELECT MGR FROM DELETED)
	SELECT @TARGET_AT = (SELECT TARGET FROM DELETED)
    SELECT @SALES = (SELECT SALES FROM DELETED)

INSERT INTO AUDIT2 VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES, 'DELETE')
RETURN

END;
----------------------------------------------------------------------------------------------
GO
CREATE PROCEDURE SAVE_PROCEDURE
		@TRIGER_NUMBER VARCHAR(20),
		@GROUP VARCHAR(20),
		@DEL VARCHAR(20)
AS
DECLARE @COUNT INT = 0

EXEC SAVE_PROCEDURE @TRIGER_NUMBER = 'TRIGGER_DELETE_THREE', @GROUP = 'LAST', @DEL = 'DELETE'
EXEC SAVE_PROCEDURE @TRIGER_NUMBER = 'TRIGGER_DELETE_TWO', @GROUP = 'FIRST', @DEL = 'DELETE'
EXEC SAVE_PROCEDURE @TRIGER_NUMBER = 'TRIGGER_DELETE_ONE', @GROUP = 'FIRST', @DEL = 'DELETE'
-----------------------------------------------------------------------------------------------
DELETE OFFICES WHERE CITY = 'MAYAMI'
DELETE OFFICES WHERE CITY = 'ALABAMA'
DELETE OFFICES WHERE CITY = 'AUSTRALIA'

INSERT INTO OFFICES VALUES(111,'ALABAMA','WILD_WEST',108,10000.00, 60000.00);
INSERT INTO OFFICES VALUES(222,'AUSTRALIA','SOUTH_COAST',108, 20000.0, 74000.00);
INSERT INTO OFFICES VALUES(333,'MAYAMI','EAST_COAST', 108, 30000.0, 83000.00);

SELECT * FROM AUDIT2
SELECT * FROM OFFICES

DROP TRIGGER TRIGGER_DELETE_ONE
DROP TRIGGER TRIGGER_DELETE_TWO
DROP TRIGGER TRIGGER_DELETE_THREE
GO

--4.	Разработать скрипт, демонстрирующий, что AFTER-триггер является частью транзакции, 
--в рамках которого выполняется оператор, активизировавший триггер.
CREATE TRIGGER IF_TRIGGER
ON OFFICES AFTER INSERT
AS
IF @@ROWCOUNT=1
BEGIN
  IF NOT EXISTS(SELECT *
      FROM OFFICES
      WHERE TARGET < 725000.00)
    BEGIN
      ROLLBACK TRAN
	  SELECT * FROM OFFICES 
    END
	INSERT INTO AUDIT VALUES (77, 'RUS','WEST_COAST', 104, 30000.0, 71000.00)	--ЗАПИСЫВАЕТСЯ 
	INSERT INTO AUDIT VALUES (709, 'ASIAN','EAST_KING', 104, 30000.0, 87000.00)	--НЕ ЗАПИСЫВАЕТСЯ В ТАБЛИЦУ АУДИТ
	  RETURN
END

DROP TRIGGER IF_TRIGGER
SELECT * FROM AUDIT

--5. Создать триггер на обновление для представления. Продемонстрировать работоспособность триггера.
--INSTEAD OF. Триггер вызывается вместо выполнения команд. В отличие от AFTER -триггера 
--INSTEAD OF -триггер может быть определен как для таблицы, так и для представления. 
--Для каждой операции INSERT, UPDATE, DELETE можно определить только один INSTEAD OF -триггер.
CREATE TRIGGER UPD_TRIGG
	ON OFFICES INSTEAD OF UPDATE
	AS
BEGIN
    DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM INSERTED)
	SELECT @CITY_AT = (SELECT CITY FROM INSERTED)
    SELECT @REGION_AT = (SELECT REGION FROM INSERTED)
    SELECT @MGR_AT = (SELECT MGR FROM INSERTED)
	SELECT @TARGET_AT = (SELECT TARGET FROM INSERTED)
    SELECT @SALES = (SELECT SALES FROM INSERTED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
END

-------------------------------------------------------------------------------------------
UPDATE OFFICES
    SET CITY = 'THAILAND'
    WHERE OFFICE = 12;
SELECT * FROM AUDIT
SELECT * FROM OFFICES

DROP TRIGGER UPD_TRIGG
-------------------------------------------------------

--6.	Создать триггер уровня базы данных. Продемонстрировать работоспособность триггера.
---------------------------------------------------------
CREATE TRIGGER SAFETY
	ON DATABASE 
	FOR DROP_TABLE, ALTER_TABLE
AS	
	PRINT 'YOU MUST DISABLE TRIGGER "SAFETY" TO DROP OR ALTER TABLES!'
	ROLLBACK;

DROP TRIGGER SAFETY

--7.	Удалить все триггеры.
--SELECT Concat('DROP TRIGGER ', IF_TRIGGER ) FROM  DBO.OFFICES;
DROP TRIGGER IF_TRIGGER
DROP TRIGGER TRIGGER_DELETE_ONE
DROP TRIGGER TRIGGER_DELETE_TWO
DROP TRIGGER TRIGGER_DELETE_THREE
DROP TRIGGER trigger_DELETE_OFFICE
DROP TRIGGER trigger_ADD_OFFICE
DROP TRIGGER trigger_NEW_OFFICE