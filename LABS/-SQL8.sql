--1.	Разработать следующие DML триггеры и продемонстрировать 
--работоспособность триггеров: 
--1.1.	При добавлении нового офиса добавлять строку с данными офиса в таблицу
--Audit.
CREATE TABLE AUDIT(
	OFFICE_AT INT,
	CITY_AT VARCHAR(20),
	REGION_AT VARCHAR(20),
	MGR_AT INT,
	TARGET_AT DECIMAL(9, 2),
	SALES DECIMAL(9, 2));

CREATE TRIGGER trigger_ADD_OFFICE
    ON OFFICES AFTER INSERT
    AS
BEGIN
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM INSERTED)
	SELECT @CITY_AT = (SELECT CITY FROM INSERTED)
    SELECT @REGION_AT = (SELECT REGION FROM INSERTED)
    SELECT @MGR_AT = (SELECT MGR FROM INSERTED)
	SELECT @TARGET_AT = (SELECT TARGET FROM INSERTED)
    SELECT @SALES = (SELECT SALES FROM INSERTED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
   
END

INSERT INTO OFFICES VALUES(30,'LOS ANGELES','EAST',NULL,500000.00,986042.00);
INSERT INTO OFFICES VALUES(44,'NEW JERSAY','Eastern',NULL,875000.00,992637.00);
INSERT INTO OFFICES VALUES(55,'BOOFALO','SOUTH',NULL,900000.00,935042.00);
INSERT INTO OFFICES VALUES(57,'DETROID','WEST',NULL,450000.00,967911.00);
INSERT INTO OFFICES VALUES(88,'MICHIGAN','EAST',NULL,225000.00,935915.00);
DROP TRIGGER trigger_ADD_OFFICE
SELECT * FROM AUDIT

select * from offices
/*GO
CREATE TABLE AUDITTABLE(
OFF_ID INT, 
OFFICE VARCHAR(15),
REGION VARCHAR(15), 
CITY VARCHAR(15));

INSERT INTO AUDITTABLE VALUES(101,'RED','WILD_WEST','LOS ANGELES');
INSERT INTO AUDITTABLE VALUES(104,'GREEN','SOUTH_COAST','NEW JERSAY');
INSERT INTO AUDITTABLE VALUES(108,'BLACK','EAST_COAST','HOLLIWOOD');
GO
CREATE TRIGGER trigger_NEW_OFFICE
    ON AUDITTABLE AFTER UPDATE
    AS IF UPDATE(OFFICE)
BEGIN
    DECLARE @OFF_ID INT
	DECLARE @OFFICE VARCHAR(15)
    DECLARE @REGION VARCHAR(15)
	DECLARE @CITY VARCHAR(15)

    SELECT @OFF_ID = (SELECT OFFICE FROM deleted)
	SELECT @OFFICE = (SELECT OFFICE FROM inserted)
    SELECT @REGION = (SELECT REGION FROM inserted)
    SELECT @CITY = (SELECT OFFICE FROM deleted)

    INSERT INTO AUDITTABLE VALUES
        (@OFF_ID, @OFFICE, @REGION, @CITY)
END

UPDATE AUDITTABLE
    SET OFF_ID = 102
    WHERE REGION = 'WILD_WEST';
	DROP TRIGGER trigger_NEW_OFFICE
select * from AUDITTABLE*/

--1.2.	При обновлении данных офиса добавлять строку с предыдущими данными офиса в таблицу Audit.
CREATE TRIGGER trigger_NEW_OFFICE
    ON OFFICES AFTER UPDATE
    AS
BEGIN
    DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM INSERTED)
	SELECT @CITY_AT = (SELECT CITY FROM INSERTED)
    SELECT @REGION_AT = (SELECT REGION FROM INSERTED)
    SELECT @MGR_AT = (SELECT MGR FROM INSERTED)
	SELECT @TARGET_AT = (SELECT TARGET FROM INSERTED)
    SELECT @SALES = (SELECT SALES FROM INSERTED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
END

UPDATE OFFICES
    SET CITY = 'TEXAS'
    WHERE OFFICE = 11;
SELECT * FROM AUDIT
SELECT * FROM OFFICES

DROP TRIGGER trigger_NEW_OFFICE

--1.3.	При удалении данных о офиса добавлять строку с данными офиса в таблицу Audit. 
CREATE TRIGGER trigger_DELETE_OFFICE
    ON OFFICES AFTER DELETE
    AS
BEGIN
	DECLARE @OFFICE_AT INT
	DECLARE @CITY_AT VARCHAR(20)
	DECLARE @REGION_AT VARCHAR(20)
	DECLARE @MGR_AT INT
	DECLARE @TARGET_AT DECIMAL(9, 2)
	DECLARE @SALES DECIMAL(9, 2)

    SELECT @OFFICE_AT = (SELECT OFFICE FROM DELETED)
	SELECT @CITY_AT = (SELECT CITY FROM DELETED)
    SELECT @REGION_AT = (SELECT REGION FROM DELETED)
    SELECT @MGR_AT = (SELECT MGR FROM DELETED)
	SELECT @TARGET_AT = (SELECT TARGET FROM DELETED)
    SELECT @SALES = (SELECT SALES FROM DELETED)

INSERT INTO AUDIT VALUES(@OFFICE_AT, @CITY_AT, @REGION_AT, @MGR_AT, @TARGET_AT, @SALES)
   
END

DELETE OFFICES WHERE CITY = 'DETROID'
DELETE OFFICES WHERE CITY = 'BOOFALO'

SELECT * FROM AUDIT
SELECT * FROM OFFICES

DROP TRIGGER trigger_DELETE_OFFICE

--2.	Разработать скрипт, который демонстрирует, что проверка ограничения целостности выполняется до срабатывания AFTER-триггера.


3.	 Создать 3 триггера, срабатывающих на событие удаления в таблице и упорядочить их.
4.	Разработать скрипт, демонстрирующий, что AFTER-триггер является частью транзакции, в рамках которого выполняется оператор, активизировавший триггер.
5.	 Создать триггер на обновление для представления. Продемонстрировать работоспособность триггера.
6.	Создать триггер уровня базы данных. Продемонстрировать работоспособность триггера.
7.	Удалить все триггеры.
